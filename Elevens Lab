/**
 * Card.java
 * Card represents a playing card.
 *
 *  Brian Snyder
 *  3/27/18
 */

public class Card {

   private String suit;      // the suit of the card
   private String rank;      // the rank of the card
   private int pointValue;   // the point value of the card

    /**
    * Creates a new Card instance.
    *
    * @param cardRank  a String value
    *                  containing the rank of the card
    * @param cardSuit  a String value
    *                  containing the suit of the card
    * @param cardPointValue an int value
    *                  containing the point value of the card
    */
   public Card(String cardRank, String cardSuit, int cardPointValue)
   {
      rank = cardRank;
      suit = cardSuit;
      pointValue = cardPointValue;
   }

   /**
    * Accesses this Card's suit.
    * @return this Card's suit.
    */
    public String suit()
   {
      return suit;
   }

   /**
    * Accesses this Card's rank.
    * @return this Card's rank.
    */
   public String rank()
   {
      return rank;
   }

    /**
    * Accesses this Card's point value.
    * @return this Card's point value.
    */
   public int pointValue()
   {
      return pointValue;
   }

   /** Compare this card with the argument.
    * @param otherCard the other card to compare to this
    * @return true if the rank, suit, and point value of this card
    *              are equal to those of the argument;
    *         false otherwise.
    */
   public boolean matches(Card otherCard)
   {
       if ((otherCard.rank().equals(rank)) && (otherCard.suit().equals(suit)) 
           && (otherCard.pointValue() == pointValue)) {
           return true;
       } else {
           return false;
       }
}

   /**
    * Converts the rank, suit, and point value into a string in the format
    *     "[Rank] of [Suit] (point value = [PointValue])".
    * This provides a useful way of printing the contents
    * of a Deck in an easily readable format or performing
    * other similar functions.
    *
    * @return a String containing the rank, suit,
    *         and point value of the card.
    */
   @Override
   public String toString()
   {
      return rank + " of " + suit + " (point value = " + pointValue + ")";
   }
}


import java.util.List;
import java.util.ArrayList;

/**
 * The Deck class represents a shuffled deck of cards.
 * It provides several operations including
 *      initialize, shuffle, deal, and check if empty.
 *
 *
 *  Brian Snyder
 *  3/27/18
 */
public class Deck
{
   private List<Card> cards;    //contains all the cards in the deck

   private int size;   // size is the number of not-yet-dealt cards.
                       // Cards are dealt from the top (highest index) down.
                       // The next card to be dealt is at size - 1.

   /**
    * Creates a new Deck instance.<BR>
    * It pairs each element of ranks with each element of suits,
    * and produces one of the corresponding card.
    * @param ranks is an array containing all of the card ranks.
    * @param suits is an array containing all of the card suits.
    * @param values is an array containing all of the card point values.
    */
   public Deck(String[] ranks, String[] suits, int[] values)
   {
      cards = new ArrayList<Card>();
      for (int i = 0; i < ranks.length; i++) {
          cards.add(new Card(ranks[i], suits[i], values[i]));
      }
      size = ranks.length;
      shuffle();
   }

   /**
    * Determines if this deck is empty (no undealt cards).
    * @return true if this deck is empty, false otherwise.
    */
   public boolean isEmpty()
   {
      if (size == 0) {
          return true;
      } else {
          return false;
      }
   }

   /**
    * Accesses the number of undealt cards in this deck.
    * @return the number of undealt cards in this deck.
    */
   public int size()
   {
      return size;
   }

   /**
    * Randomly permute the given collection of cards
    * and reset the size to represent the entire deck.
    */
   public void shuffle()
   {
      int r;
      List<Card> test = new ArrayList<Card>();
      for (int i = size-1; i > 0; i--) {
          r = (int)(Math.random()*(i+1));
          test.add(cards.get(i));
          cards.set(i,cards.get(r));
      }
   }
   
   /**
    * Deals a card from this deck.
    * @return the card just dealt, or null if all the cards have been
    *         previously dealt.
    */
   public Card deal()
   {
      if (size == 0) {
          return null;
      } else {
          size--;
          return cards.get(size);
      }
   }

   /**
    * Generates and returns a string representation of this deck.
    * @return a string representation of this deck.
    */
   @Override
   public String toString()
   {
      String rtn = "size = " + size + "\nUndealt cards: \n";

      for (int k = size - 1; k >= 0; k--)
      {
         rtn = rtn + cards.get(k);
         if (k != 0)
         {
            rtn = rtn + ", ";
         }
         if ((size - k) % 2 == 0)
         {
            // Insert carriage returns so entire deck is visible on console.
            rtn = rtn + "\n";
         }
      }

      rtn = rtn + "\nDealt cards: \n";
      for (int k = cards.size() - 1; k >= size; k--)
      {
         rtn = rtn + cards.get(k);
         if (k != size)
         {
            rtn = rtn + ", ";
         }
         if ((k - cards.size()) % 2 == 0)
         {
            // Insert carriage returns so entire deck is visible on console.
            rtn = rtn + "\n";
         }
      }
      rtn = rtn + "\n";
      return rtn;
   }
}

/*
 * The CardGameGUI class supports the Elevens Lab.
 * The project does not require students to modify
 * or learn the code below.
 */
import java.awt.Point;
import java.awt.Graphics;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseEvent;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.ImageIcon;
import java.net.URL;
import java.util.List;
import java.util.ArrayList;

/**
 * This class provides a GUI for solitaire games related to Elevens.
 */
public class CardGameGUI extends JFrame implements ActionListener {

   /** Height of the game frame. */
   private static final int DEFAULT_HEIGHT = 302;
   /** Width of the game frame. */
   private static final int DEFAULT_WIDTH = 800;
   /** Width of a card. */
   private static final int CARD_WIDTH = 73;
   /** Height of a card. */
   private static final int CARD_HEIGHT = 97;
   /** Row (y coord) of the upper left corner of the first card. */
   private static final int LAYOUT_TOP = 30;
   /** Column (x coord) of the upper left corner of the first card. */
   private static final int LAYOUT_LEFT = 30;
   /** Distance between the upper left x coords of
    *  two horizonally adjacent cards. */
   private static final int LAYOUT_WIDTH_INC = 100;
   /** Distance between the upper left y coords of
    *  two vertically adjacent cards. */
   private static final int LAYOUT_HEIGHT_INC = 125;
   /** y coord of the "Replace" button. */
   private static final int BUTTON_TOP = 30;
   /** x coord of the "Replace" button. */
   private static final int BUTTON_LEFT = 570;
   /** Distance between the tops of the "Replace" and "Restart" buttons. */
   private static final int BUTTON_HEIGHT_INC = 50;
   /** y coord of the "n undealt cards remain" label. */
   private static final int LABEL_TOP = 160;
   /** x coord of the "n undealt cards remain" label. */
   private static final int LABEL_LEFT = 540;
   /** Distance between the tops of the "n undealt cards" and
    *  the "You lose/win" labels. */
   private static final int LABEL_HEIGHT_INC = 35;

   /** The board (Board subclass). */
   private ElevensBoard board;

   /** The main panel containing the game components. */
   private JPanel panel;
   /** The Replace button. */
   private JButton replaceButton;
   /** The Restart button. */
   private JButton restartButton;
   /** The "number of undealt cards remain" message. */
   private JLabel statusMsg;
   /** The "you've won n out of m games" message. */
   private JLabel totalsMsg;
   /** The card displays. */
   private JLabel[] displayCards;
   /** The win message. */
   private JLabel winMsg;
   /** The loss message. */
   private JLabel lossMsg;
   /** The coordinates of the card displays. */
   private Point[] cardCoords;

   /** kth element is true iff the user has selected card #k. */
   private boolean[] selections;
   /** The number of games won. */
   private int totalWins;
   /** The number of games played. */
   private int totalGames;


   /**
    * Initialize the GUI.
    * @param gameBoard is a <code>Board</code> subclass.
    */
   public CardGameGUI(ElevensBoard gameBoard) {
      board = gameBoard;
      totalWins = 0;
      totalGames = 0;

      // Initialize cardCoords using 5 cards per row
      cardCoords = new Point[board.size()];
      int x = LAYOUT_LEFT;
      int y = LAYOUT_TOP;
      for (int i = 0; i < cardCoords.length; i++) {
         cardCoords[i] = new Point(x, y);
         if (i % 5 == 4) {
            x = LAYOUT_LEFT;
            y += LAYOUT_HEIGHT_INC;
         } else {
            x += LAYOUT_WIDTH_INC;
         }
      }

      selections = new boolean[board.size()];
      initDisplay();
      setDefaultCloseOperation(EXIT_ON_CLOSE);
      repaint();
   }

   /**
    * Run the game.
    */
   public void displayGame() {
      java.awt.EventQueue.invokeLater(new Runnable() {
         public void run() {
            setVisible(true);
         }
      });
   }

   /**
    * Draw the display (cards and messages).
    */
   public void repaint() {
      for (int k = 0; k < board.size(); k++) {
         String cardImageFileName =
            imageFileName(board.cardAt(k), selections[k]);
         URL imageURL = getClass().getResource(cardImageFileName);
         if (imageURL != null) {
            ImageIcon icon = new ImageIcon(imageURL);
            displayCards[k].setIcon(icon);
            displayCards[k].setVisible(true);
         } else {
            throw new RuntimeException(
               "Card image not found: \"" + cardImageFileName + "\"");
         }
      }
      statusMsg.setText(board.deckSize()
         + " undealt cards remain.");
      statusMsg.setVisible(true);
      totalsMsg.setText("You've won " + totalWins
          + " out of " + totalGames + " games.");
      totalsMsg.setVisible(true);
      pack();
      panel.repaint();
   }

   /**
    * Initialize the display.
    */
   private void initDisplay() {
      panel = new JPanel() {
         public void paintComponent(Graphics g) {
            super.paintComponent(g);
         }
      };

      // If board object's class name follows the standard format
      // of ...Board or ...board, use the prefix for the JFrame title
      String className = board.getClass().getSimpleName();
      int classNameLen = className.length();
      int boardLen = "Board".length();
      String boardStr = className.substring(classNameLen - boardLen);
      if (boardStr.equals("Board") || boardStr.equals("board")) {
         int titleLength = classNameLen - boardLen;
         setTitle(className.substring(0, titleLength));
      }

      // Calculate number of rows of cards (5 cards per row)
      // and adjust JFrame height if necessary
      int numCardRows = (board.size() + 4) / 5;
      int height = DEFAULT_HEIGHT;
      if (numCardRows > 2) {
         height += (numCardRows - 2) * LAYOUT_HEIGHT_INC;
      }

      this.setSize(new Dimension(DEFAULT_WIDTH, height));
      panel.setLayout(null);
      panel.setPreferredSize(
         new Dimension(DEFAULT_WIDTH - 20, height - 20));
      displayCards = new JLabel[board.size()];
      for (int k = 0; k < board.size(); k++) {
         displayCards[k] = new JLabel();
         panel.add(displayCards[k]);
         displayCards[k].setBounds(cardCoords[k].x, cardCoords[k].y,
                              CARD_WIDTH, CARD_HEIGHT);
         displayCards[k].addMouseListener(new MyMouseListener());
         selections[k] = false;
      }
      replaceButton = new JButton();
      replaceButton.setText("Replace");
      panel.add(replaceButton);
      replaceButton.setBounds(BUTTON_LEFT, BUTTON_TOP, 100, 30);
      replaceButton.addActionListener(this);

      restartButton = new JButton();
      restartButton.setText("Restart");
      panel.add(restartButton);
      restartButton.setBounds(BUTTON_LEFT, BUTTON_TOP + BUTTON_HEIGHT_INC,
                              100, 30);
      restartButton.addActionListener(this);

      statusMsg = new JLabel(
         board.deckSize() + " undealt cards remain.");
      panel.add(statusMsg);
      statusMsg.setBounds(LABEL_LEFT, LABEL_TOP, 250, 30);

      winMsg = new JLabel();
      winMsg.setBounds(LABEL_LEFT, LABEL_TOP + LABEL_HEIGHT_INC, 200, 30);
      winMsg.setFont(new Font("SansSerif", Font.BOLD, 25));
      winMsg.setForeground(Color.GREEN);
      winMsg.setText("You win!");
      panel.add(winMsg);
      winMsg.setVisible(false);

      lossMsg = new JLabel();
      lossMsg.setBounds(LABEL_LEFT, LABEL_TOP + LABEL_HEIGHT_INC, 200, 30);
      lossMsg.setFont(new Font("SanSerif", Font.BOLD, 25));
      lossMsg.setForeground(Color.RED);
      lossMsg.setText("Sorry, you lose.");
      panel.add(lossMsg);
      lossMsg.setVisible(false);

      totalsMsg = new JLabel("You've won " + totalWins
         + " out of " + totalGames + " games.");
      totalsMsg.setBounds(LABEL_LEFT, LABEL_TOP + 2 * LABEL_HEIGHT_INC,
                          250, 30);
      panel.add(totalsMsg);

      if (!board.anotherPlayIsPossible()) {
         signalLoss();
      }

      pack();
      getContentPane().add(panel);
      getRootPane().setDefaultButton(replaceButton);
      panel.setVisible(true);
   }

   /**
    * Deal with the user clicking on something other than a button or a card.
    */
   private void signalError() {
      Toolkit t = panel.getToolkit();
      t.beep();
   }

   /**
    * Returns the image that corresponds to the input card.
    * Image names have the format "[Rank][Suit].GIF" or "[Rank][Suit]S.GIF",
    * for example "aceclubs.GIF" or "8heartsS.GIF". The "S" indicates that
    * the card is selected.
    *
    * @param c Card to get the image for
    * @param isSelected flag that indicates if the card is selected
    * @return String representation of the image
    */
   private String imageFileName(Card c, boolean isSelected) {
      String str = "cards/";
      if (c == null) {
         return "cards/back1.GIF";
      }
      str += c.rank() + c.suit();
      if (isSelected) {
         str += "S";
      }
      str += ".GIF";
      return str;
   }

   /**
    * Respond to a button click (on either the "Replace" button
    * or the "Restart" button).
    * @param e the button click action event
    */
   public void actionPerformed(ActionEvent e) {
      if (e.getSource().equals(replaceButton)) {
         // Gather all the selected cards.
         List<Integer> selection = new ArrayList<Integer>();
         for (int k = 0; k < board.size(); k++) {
            if (selections[k]) {
               selection.add(new Integer(k));
            }
         }
         // Make sure that the selected cards represent a legal replacement.
         if (!board.isLegal(selection)) {
            signalError();
            return;
         }
         for (int k = 0; k < board.size(); k++) {
            selections[k] = false;
         }
         // Do the replace.
         board.replaceSelectedCards(selection);
         if (board.isEmpty()) {
            signalWin();
         } else if (!board.anotherPlayIsPossible()) {
            signalLoss();
         }
         repaint();
      } else if (e.getSource().equals(restartButton)) {
         board.newGame();
         getRootPane().setDefaultButton(replaceButton);
         winMsg.setVisible(false);
         lossMsg.setVisible(false);
         if (!board.anotherPlayIsPossible()) {
            signalLoss();
            lossMsg.setVisible(true);
         }
         for (int i = 0; i < selections.length; i++) {
            selections[i] = false;
         }
         repaint();
      } else {
         signalError();
         return;
      }
   }

   /**
    * Display a win.
    */
   private void signalWin() {
      getRootPane().setDefaultButton(restartButton);
      winMsg.setVisible(true);
      totalWins++;
      totalGames++;
   }

   /**
    * Display a loss.
    */
   private void signalLoss() {
      getRootPane().setDefaultButton(restartButton);
      lossMsg.setVisible(true);
      totalGames++;
   }

   /**
    * Receives and handles mouse clicks.  Other mouse events are ignored.
    */
   private class MyMouseListener implements MouseListener {

      /**
       * Handle a mouse click on a card by toggling its "selected" property.
       * Each card is represented as a label.
       * @param e the mouse event.
       */
      public void mouseClicked(MouseEvent e) {
         for (int k = 0; k < board.size(); k++) {
            if (e.getSource().equals(displayCards[k])
                  && board.cardAt(k) != null) {
               selections[k] = !selections[k];
               repaint();
               return;
            }
         }
         signalError();
      }

      /**
       * Ignore a mouse exited event.
       * @param e the mouse event.
       */
      public void mouseExited(MouseEvent e) {
      }

      /**
       * Ignore a mouse released event.
       * @param e the mouse event.
       */
      public void mouseReleased(MouseEvent e) {
      }

      /**
       * Ignore a mouse entered event.
       * @param e the mouse event.
       */
      public void mouseEntered(MouseEvent e) {
      }

      /**
       * Ignore a mouse pressed event.
       * @param e the mouse event.
       */
      public void mousePressed(MouseEvent e) {
      }
   }
}

import java.util.List;
import java.util.ArrayList;

/**
 * The ElevensBoard class represents the board in a game of Elevens.
 *
 *
 *  Brian Snyder
 *  3/27/18
 */

public class ElevensBoard extends Board{
   //  The size (number of cards) on the board.
   private static final int BOARD_SIZE = 9;

   // The ranks of the cards for this game to be sent to the deck.
   private static final String[] RANKS =
      {"ace", "2", "3", "4", "5", "6", "7", "8", "9", "10", "jack", "queen", "king"};

   // The suits of the cards for this game to be sent to the deck.
   private static final String[] SUITS =
      {"spades", "hearts", "diamonds", "clubs", "spades", "spades","spades", "spades", "spades", "spades", "spades", "spades", "spades",};

   // The values of the cards for this game to be sent to the deck.
   private static final int[] POINT_VALUES =
      {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 0, 0};

   // The cards on this board.
   private Card[] cards;

   // The deck of cards being used to play the current game.
   private Deck deck;

   // Flag used to control debugging print statements.
   private static final boolean I_AM_DEBUGGING = false;

   /**
    * Creates a new ElevensBoard instance.
    */
   public ElevensBoard()
   {
      //super(size, ranks, suits, pointValues);
      cards = new Card[BOARD_SIZE];
      deck = new Deck(RANKS, SUITS, POINT_VALUES);
      if (I_AM_DEBUGGING)
      {
         System.out.println(deck);
         System.out.println("----------");
      }
      dealMyCards();
   }

   /**
    * Start a new game by shuffling the deck and
    * dealing some cards to this board.
    */
   public void newGame()
   {
      deck.shuffle();
      dealMyCards();
   }

   /**
    * Accesses the size of the board.
    * Note that this is not the number of cards it contains,
    * which will be smaller near the end of a winning game.
    * @return the size of the board
    */
   public int size()
   {
      return cards.length;
   }

   /**
    * Determines if the board is empty (has no cards).
    * @return true if this board is empty; false otherwise.
    */
   public boolean isEmpty()
   {
      for (int k = 0; k < cards.length; k++)
      {
         if (cards[k] != null)
         {
            return false;
         }
      }
      return true;
   }

   /**
    * Deal a card to the kth position in this board.
    * If the deck is empty, the kth card is set to null.
    * @param k the index of the card to be dealt.
    */
   public void deal(int k)
   {
      cards[k] = deck.deal();
   }

   /**
    * Accesses the deck's size.
    * @return the number of undealt cards left in the deck.
    */
   public int deckSize()
   {
      return deck.size();
   }

   /**
    * Accesses a card on the board.
    * @return the card at position k on the board.
    * @param k is the board position of the card to return.
    */
   public Card cardAt(int k)
   {
      return cards[k];
   }

   /**
    * Replaces selected cards on the board by dealing new cards.
    * @param selectedCards is a list of the indices of the
    *        cards to be replaced.
    */
   public void replaceSelectedCards(List<Integer> selectedCards)
   {
      for (Integer k : selectedCards)
      {
         deal(k.intValue());
      }
   }

   /**
    * Gets the indexes of the actual (non-null) cards on the board.
    *
    * @return a List that contains the locations (indexes)
    *         of the non-null entries on the board.
    */
   public List<Integer> cardIndexes()
   {
      List<Integer> selected = new ArrayList<Integer>();
      for (int k = 0; k < cards.length; k++)
      {
         if (cards[k] != null)
         {
            selected.add(new Integer(k));
         }
      }
      return selected;
   }

   /**
    * Generates and returns a string representation of this board.
    * @return the string version of this board.
    */
   public String toString()
   {
      String s = "";
      for (int k = 0; k < cards.length; k++)
      {
         s = s + k + ": " + cards[k] + "\n";
      }
      return s;
   }

   /**
    * Determine whether or not the game has been won,
    * i.e. neither the board nor the deck has any more cards.
    * @return true when the current game has been won;
    *         false otherwise.
    */
   public boolean gameIsWon()
   {
      if (deck.isEmpty())
      {
         for (Card c : cards)
         {
            if (c != null)
            {
               return false;
            }
         }
         return true;
      }
      return false;
   }

   /**
    * Determines if the selected cards form a valid group for removal.
    * In Elevens, the legal groups are (1) a pair of non-face cards
    * whose values add to 11, and (2) a group of three cards consisting of
    * a jack, a queen, and a king in some order.
    * @param selectedCards the list of the indices of the selected cards.
    * @return true if the selected cards form a valid group for removal;
    *         false otherwise.
    */
   public boolean isLegal(List<Integer> selectedCards)
   {
       
       if (selectedCards.size() == 2) {
           if (containsPairSum11(selectedCards)) {
               return true;
           } else {
               return false;
           }
       } else if (selectedCards.size() == 3) {
           if (containsJQK(selectedCards)) {
               return true;
           } else {
                return false;
           }
       } else {
           return false;
       }
   }

   /**
    * Determine if there are any legal plays left on the board.
    * In Elevens, there is a legal play if the board contains
    * (1) a pair of non-face cards whose values add to 11, or (2) a group
    * of three cards consisting of a jack, a queen, and a king in some order.
    * @return true if there is a legal play left on the board;
    *         false otherwise.
    */
   public boolean anotherPlayIsPossible() {
      if ((containsPairSum11(cardIndexes())) || (containsJQK(cardIndexes()))) {
          return true;
      } else {
            return false;
      }
   }

   /**
    * Deal cards to this board to start the game.
    */
   private void dealMyCards()
   {
      for (int k = 0; k < cards.length; k++)
      {
         cards[k] = deck.deal();
      }
   }

   /**
    * Check for an 11-pair in the selected cards.
    * @param selectedCards selects a subset of this board.  It is list
    *                      of indexes into this board that are searched
    *                      to find an 11-pair.
    * @return true if the board entries in selectedCards
    *              contain an 11-pair; false otherwise.
    */
   private boolean containsPairSum11(List<Integer> selectedCards)
   {
       int total = 0;
       total = cards[selectedCards.get(0)].pointValue() + cards[selectedCards.get(1)].pointValue();
       if (total == 11) {
           return true;
       } else {
            return false;
       }
   }

   /**
    * Check for a JQK in the selected cards.
    * @param selectedCards selects a subset of this board.  It is list
    *                      of indexes into this board that are searched
    *                      to find a JQK group.
    * @return true if the board entries in selectedCards
    *              include a jack, a queen, and a king; false otherwise.
    */
   private boolean containsJQK(List<Integer> selectedCards)
   {
      int count = 0;
      for (int i = 0; i < selectedCards.size(); i++) {
          if ((cards[selectedCards.get(i)].rank() == "jack") ||
             (cards[selectedCards.get(i)].rank() == "queen") ||
             (cards[selectedCards.get(i)].rank() == "king")) {
                 count++;
          }
      }
      if (count == 3) {
          return true;
      } else {
          return false;
      }
   }
}

/**
 * This is a class that plays the GUI version of the Elevens game.
 * See accompanying documents for a description of how Elevens is played.
 *
 * Run this program to test the Board and Elevens Board classes. No edits needed.
 * If successful, you can play the Elevens Game!
 */
public class ElevensGUIRunner {

   /**
    * Plays the GUI version of Elevens.
    * @param args is not used.
    */
   public static void main(String[] args) {
      Board board = new ElevensBoard();
      CardGameGUI gui = new CardGameGUI((ElevensBoard)board);
      gui.displayGame();
   }
}

/**
 * This is a class that tests the Card class.
 *
 *  Brian Snyder
 *  3/27/18
 */

public class CardTester
{
   /**
    * The main method in this class checks the Card operations for consistency.
    * @param args is not used.
    */
   public static void main(String[] args) {

      /* *** TO BE IMPLEMENTED IN ACTIVITY 1 *** */

      // Establish new cards
      Card aceHearts = new Card("ace", "hearts", 1);
      Card aceSpades = new Card("ace", "spades", 1);
      Card aceHearts2 = new Card("ace", "hearts", 1);

      // Test card 1 and methods
      System.out.println("**** Tests Card 1: ace of hearts ****");
      System.out.println("  rank: " + aceHearts.rank());
      System.out.println("  suit: " + aceHearts.suit());
      System.out.println("  pointValue: " + aceHearts.pointValue());
      System.out.println("  toString: " + aceHearts.toString());
      System.out.println();

      // Test card 2
      System.out.println("**** ace of spaces Tests ****");
      System.out.println("  rank: " + aceSpades.rank());
      System.out.println("  suit: " + aceSpades.suit());
      System.out.println("  pointValue: " + aceSpades.pointValue());
      System.out.println("  toString: " + aceSpades.toString());
      System.out.println();
      
      // Test card 3
      System.out.println("**** ace of hearts Tests ****");
      System.out.println("  rank: " + aceHearts2.rank());
      System.out.println("  suit: " + aceHearts2.suit());
      System.out.println("  pointValue: " + aceHearts2.pointValue());
      System.out.println("  toString: " + aceHearts2.toString());
      System.out.println();
      
      // Test matches() method
      System.out.println("**** matches Tests ****");
      System.out.println("mathcing: " + aceHearts.matches(aceHearts2));
      System.out.println("not mathcing: " + aceHearts.matches(aceSpades));
      

   }
}

/**
 * This is a class that tests the Deck class.
 *
 *  Brian Snyder
 *  3/27/18
 */

public class DeckTester
{
   /**
    * The main method in this class checks the Deck operations for consistency.
    * @param args is not usemyDeck.
    */
   public static void main(String[] args)
   {
      /* *** TO BE IMPLEMENTED IN ACTIVITY 2 *** */
      /* Uncomment blocks of code to test the Deck class */

      String[] myRanks = {"queen", "king", "ace", "jack", "10", "6", "2", "king", "ace", "5" };
      String[] mySuits = {"heart", "spade", "diamond", "club", "spade", "diamond", "heart", "club", "heart", "diamond"};
      int[] myPointValues = {12, 13, 1, 11, 10, 6, 2, 13, 1, 5};
      Deck myDeck = new Deck(myRanks, mySuits, myPointValues);

      System.out.println("**** Original Deck Methods ****");
      System.out.println("  toString: \n" + myDeck.toString());
      System.out.println("  isEmpty: " + myDeck.isEmpty());
      System.out.println("  size: " + myDeck.size());
      System.out.println();
      System.out.println();

      System.out.println("**** Deal a Card ****");
      System.out.println("  deal: " + myDeck.deal());
      System.out.println();
      System.out.println();

      System.out.println("**** Deck Methods After 1 Card Dealt ****");
      System.out.println("  toString:\n" + myDeck.toString());
      System.out.println("  isEmpty: " + myDeck.isEmpty());
      System.out.println("  size: " + myDeck.size());
      System.out.println();
      System.out.println();

      for (int i = 0; i < 4; i++) {
          myDeck.deal();
      }
      
      System.out.println("**** Deal Remaining 5 Cards ****");
      System.out.println("  toString:\n" + myDeck.toString());
      System.out.println("  isEmpty: " + myDeck.isEmpty());
      System.out.println("  size: " + myDeck.size());
      System.out.println();
      System.out.println();
      
      for (int i = 0; i < 5; i++) {
          myDeck.deal();
      }

      System.out.println("**** Deck Methods After All Cards Dealt ****");
      System.out.println("  toString:\n" + myDeck.toString());
      System.out.println("  isEmpty: " + myDeck.isEmpty());
      System.out.println("  size: " + myDeck.size());
      System.out.println();
      System.out.println();
      
      System.out.println("**** Deal a Card From Empty Deck ****");
      System.out.println("  deal: " + myDeck.deal());
      System.out.println();
      System.out.println();


      /* *** TO BE IMPLEMENTED IN ACTIVITY 4 *** */
      // initializes 52 card deck
      System.out.println("\n**** 52 Card Deck shuffle Tests ****");
      String[] ranks52 = {"ace", "ace", "ace", "ace", "2", "2", "2", "2",
                         "3", "3", "3", "3", "4", "4", "4", "4", "5","5","5",
                         "5", "6","6","6","6","7","7","7","7","8","8","8","8",
                        "9","9","9","9","10","10","10","10","jack","jack","jack",
                    "jack","queen","queen","queen","queen","king","king","king", "king"};
      String[] suits52 = {"spades", "clubs", "diamonds", "heart","spades", 
          "clubs", "diamonds", "heart","spades", "clubs", "diamonds", "heart",
          "spades", "clubs", "diamonds", "heart","spades", "clubs", "diamonds",
          "heart","spades", "clubs", "diamonds", "heart","spades", "clubs", 
          "diamonds", "heart","spades", "clubs", "diamonds", "heart","spades",
          "clubs", "diamonds", "heart","spades", "clubs", "diamonds", "heart",
          "spades", "clubs", "diamonds", "heart","spades", "clubs", "diamonds",
          "heart","spades", "clubs", "diamonds", "heart",};
      int[] pointValues52 = {1, 1, 1, 1, 2, 2, 2, 2,3,3,3,3,4,4,4,4,5,5,5,5,
        6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10,11,11,11,11,12,12,12,12,
        13,13,13,13};
      Deck myDeck2 = new Deck(ranks52, suits52, pointValues52);

      System.out.println("  The Starting Deck ");
      System.out.println(myDeck2.toString());

      System.out.println("  The Deck After Dealing a Card" );
      System.out.println("deal: " + myDeck2.deal());
      myDeck2.shuffle(); // shuffles dec again
      System.out.println("  Shuffleing the Deck ");
      System.out.println(myDeck2.toString());


   }
}

import java.util.List;
import java.util.ArrayList;

/**
 * This class represents a Board that can be used in a collection
 * of solitaire games similar to Elevens.  The variants differ in
 * card removal and the board size.
 *
 *  Students will not modify this class. All code is complete as is.
 */
public abstract class Board
{
   // The cards on this board.
   //private Card[] cards;

   // The deck of cards being used to play the current game.
   //private Deck deck;

   // Flag used to control debugging print statements.
   //private static final boolean I_AM_DEBUGGING = false;

   /**
    * Creates a new Board instance.
    * @param size the number of cards in the board
    * @param ranks the names of the card ranks needed to create the deck
    * @param suits the names of the card suits needed to create the deck
    * @param pointValues the integer values of the cards needed to create
    *                    the deck
    */
   public Board()
   {
      //cards = new Card[size];
      //deck = new Deck(ranks, suits, pointValues);
     /*if (I_AM_DEBUGGING)
      {
         System.out.println(deck);
         System.out.println("----------");
      } */
      //dealMyCards();
   }
   
   /**
    * Start a new game by shuffling the deck and
    * dealing some cards to this board.
    */
   //public void newGame()
   //{
      //deck.shuffle();
      //dealMyCards();
   //}

   /**
    * Accesses the size of the board.
    * Note that this is not the number of cards it contains,
    * which will be smaller near the end of a winning game.
    * @return the size of the board
    */
   /*public int size()
   {
      return cards.length;
   }

   /**
    * Determines if the board is empty (has no cards).
    * @return true if this board is empty; false otherwise.
    */
   /*public boolean isEmpty() 
   {
      for (int k = 0; k < cards.length; k++)
      {
         if (cards[k] != null)
         {
            return false;
         }
      }
      return true;
   }

   /**
    * Deal a card to the kth position in this board.
    * If the deck is empty, the kth card is set to null.
    * @param k the index of the card to be dealt.
    */
   /*public void deal(int k)
   {
      cards[k] = deck.deal();
   }

   /**
    * Accesses the deck's size.
    * @return the number of undealt cards left in the deck.
    */
   /*public int deckSize()
   {
      return deck.size();
   }

   /**
    * Accesses a card on the board.
    * @return the card at position k on the board.
    * @param k is the board position of the card to return.
    */
   /*public Card cardAt(int k)
   {
      return cards[k];
   }

   /**
    * Replaces selected cards on the board by dealing new cards.
    * @param selectedCards is a list of the indices of the
    *        cards to be replaced.
    */
   /*public void replaceSelectedCards(List<Integer> selectedCards)
   {
      for (Integer k : selectedCards)
      {
         deal(k.intValue());
      }
   }

   /**
    * Gets the indexes of the actual (non-null) cards on the board.
    *
    * @return a List that contains the locations (indexes)
    *         of the non-null entries on the board.
    */
   /*public List<Integer> cardIndexes()
   {
      List<Integer> selected = new ArrayList<Integer>();
      for (int k = 0; k < cards.length; k++)
      {
         if (cards[k] != null)
         {
            selected.add(new Integer(k));
         }
      }
      return selected;
   }

   /**
    * Generates and returns a string representation of this board.
    * @return the string version of this board.
    */
   /*public String toString()
   {
      String s = "";
      for (int k = 0; k < cards.length; k++)
      {
         s = s + k + ": " + cards[k] + "\n";
      }
      return s;
   }

   /**
    * Determine whether or not the game has been won,
    * i.e. neither the board nor the deck has any more cards.
    * @return true when the current game has been won;
    *         false otherwise.
    */
   /*public boolean gameIsWon()
   {
      if (deck.isEmpty())
      {
         for (Card c : cards)
         {
            if (c != null)
            {
               return false;
            }
         }
         return true;
      }
      return false;
   }

   /**
    * Method to be completed by the concrete class that determines
    * if the selected cards form a valid group for removal.
    * @param selectedCards the list of the indices of the selected cards.
    * @return true if the selected cards form a valid group for removal;
    *         false otherwise.
    */
   public abstract boolean isLegal(List<Integer> selectedCards);

   /**
    * Method to be completed by the concrete class that determines
    * if there are any legal plays left on the board.
    * @return true if there is a legal play left on the board;
    *         false otherwise.
    */
   public abstract boolean anotherPlayIsPossible();

   /**
    * Deal cards to this board to start the game.
    */
   /*private void dealMyCards()
   {
      for (int k = 0; k < cards.length; k++)
      {
         cards[k] = deck.deal();
      }
   } */
}
